#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.23329400651878446, -2.401307932461492, 1.61511270182106)
                double3 target = (-0.11453102111729796, 0.6574118978054742, 0.491588047434099)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./open_door.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, -0.02832868184172832)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def Xform "Open_Door" (
        kind = "assembly"
        prepend payload = @../../../door_09/Assembly_1_edit.usd@
    )
    {
        over "Assembly_1"
        {
            over "Frame"
            {
                over "Frame" (
                    prepend apiSchemas = ["PhysxSDFMeshCollisionAPI"]
                )
                {
                    uniform token physics:approximation = "sdf"
                }
            }

            over "Hinge_Door"
            {
                over "HingeLeaf"
                {
                }
            }

            over "handel" (
                prepend apiSchemas = ["PhysxSDFMeshCollisionAPI"]
            )
            {
                uniform token physics:approximation = "sdf"
            }

            over "latch"
            {
            }

            over "Revolute_1" (
                prepend apiSchemas = ["PhysxJointAPI"]
            )
            {
                float physics:lowerLimit = -45
                float physics:upperLimit = 45
                float physxJoint:armature = 0.5
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "Slider_1"
            {
                float state:linear:physics:position = 0
                float state:linear:physics:velocity = 0
            }

            over "Revolute_2"
            {
                float physics:lowerLimit = 0
                float physics:upperLimit = 180
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }
    }

    def DistantLight "DistantLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

def CesiumDataPrim "Cesium"
{
    prepend rel cesium:selectedIonServer = </CesiumServers/IonOfficial>
}

def CesiumGeoreferencePrim "CesiumGeoreference"
{
    matrix4d cesium:ecefToUsdTransform = ( (0.9647534819407177, 0.1682239812131189, -0.20236455032458023, 0), (-0.2631553136139595, 0.6167258011721835, -0.741888513919219, 0), (2.7755575615628914e-17, 0.7689928337204038, 0.6392573986170699, 0), (-1.1260326425004901e-10, 21025.701877878048, -6371656.822771804, 1) )
}

def "CesiumServers"
{
    def CesiumIonServerPrim "IonOfficial"
    {
        string cesium:displayName = "ion.cesium.com"
        string cesium:ionServerApiUrl = "https://api.cesium.com/"
        int64 cesium:ionServerApplicationId = 413
        string cesium:ionServerUrl = "https://ion.cesium.com/"
    }
}

